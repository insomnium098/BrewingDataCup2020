if (numdate < 700) {
plot(x1, y, pch = pch, col = col1, main = ifelse(main ==
"auto", string5, main), ylim = c(-1, max(y)),
xlab = " ", ylab = ifelse(ylab == "auto",
" ", ylab), yaxt = "n", xaxt = "n", ...)
axis(1, at = date.pretty, labels = as.character(date.pretty,
format = format.time), cex.axis = cex.X.axis)
}
else {
plot(x1, y, pch = pch, col = col1, main = ifelse(main ==
"auto", string5, main), ylim = c(-1, (summary(y))[6]),
xlab = " ", ylab = ifelse(ylab == "auto",
" ", ylab), yaxt = "n", cex.axis = cex.X.axis,
...)
}
}
else {
plot(x1, y, pch = pch, col = col1, main = ifelse(main ==
"auto", string5, main), ylim = c(-1, max(y)),
xlab = " ", ylab = ifelse(ylab == "auto", " ",
ylab), yaxt = "n", cex.axis = cex.X.axis,
...)
if (any(class(x) == "difftime")) {
unit <- attr(x, "unit")
}
else {
unit <- " "
}
title(xlab = unit)
}
if (length(x1) < 20) {
abline(h = y, lty = 3)
}
yline <- NULL
if (any(is.na(levels(by2)))) {
levels(by2)[length(levels(by2))] <- "missing"
}
for (i in 1:length(levels(by2))) {
yline <- c(yline, sum(as.numeric(by2) == i))
}
yline <- c(0, cumsum(yline)[1:(length(yline) - 1)]) +
(0:(length(yline) - 1))
abline(h = yline, col = "blue")
axis(2, at = yline, labels = levels(by2), padj = 0,
las = 1, cex.axis = cex.Y.axis)
par(mai = c(0.95625, 0.76875, 0.76875, 0.39375))
}
else {
x1 <- x[order(x)]
y <- 1:length(x1)
if (is.factor(x1)) {
plot(as.numeric(x1), y, pch = pch, col = ifelse(dot.col ==
"auto", "blue", dot.col), main = ifelse(main ==
"auto", string3, main), xlab = " ", ylab = ifelse(ylab ==
"auto", .ylab.for.summ, ylab), xaxt = "n",
cex.axis = cex.Y.axis, ...)
axis(1, at = 1:length(levels(x1)), labels = levels(x1),
cex.axis = cex.X.axis)
}
else if (any(class(x) == "POSIXt")) {
plot(x1, y, pch = pch, col = ifelse(dot.col ==
"auto", "blue", dot.col), main = ifelse(main ==
"auto", string3, main), xlab = " ", ylab = ifelse(ylab ==
"auto", .ylab.for.summ, ylab), xaxt = "n",
cex.axis = cex.Y.axis, ...)
axis(1, at = time.pretty, labels = as.character(time.pretty,
format = format.time), cex.axis = cex.X.axis)
}
else if (any(class(x) == "Date")) {
if (numdate < 700) {
plot(x1, y, pch = pch, col = ifelse(dot.col ==
"auto", "blue", dot.col), main = ifelse(main ==
"auto", string3, main), xlab = " ", ylab = ifelse(ylab ==
"auto", .ylab.for.summ, ylab), yaxt = "n",
xaxt = "n", ...)
axis(1, at = date.pretty, labels = as.character(date.pretty,
format = format.time), cex.axis = cex.X.axis)
}
else {
plot(x1, y, pch = pch, col = ifelse(dot.col ==
"auto", "blue", dot.col), main = ifelse(main ==
"auto", string3, main), xlab = " ", ylab = ifelse(ylab ==
"auto", .ylab.for.summ, ylab), yaxt = "n",
cex.axis = cex.X.axis, ...)
}
}
else {
plot(x1, y, pch = pch, col = ifelse(dot.col ==
"auto", "blue", dot.col), main = ifelse(main ==
"auto", string3, main), xlab = " ", ylab = ifelse(ylab ==
"auto", .ylab.for.summ, ylab), yaxt = "n",
cex.axis = cex.X.axis, ...)
if (any(class(x) == "difftime")) {
unit <- attr(x, "unit")
}
else {
unit <- " "
}
title(xlab = unit)
}
if (length(x1) < 30) {
abline(h = y, lty = 3)
}
if (box == TRUE) {
boxplot(unclass(x1), add = TRUE, horizontal = TRUE,
axes = FALSE, at = 0.8 * length(sort(x1)),
boxwex = 0.2 * length(sort(x1)))
}
}
}
if (is.numeric(x) | is.integer(x)) {
attributes(x) <- NULL
}
if (is.data.frame(x)) {
heading <- paste(attr(x, "datalabel"), "\n", .No.of.observations,
nrow(x), "\n", "\n", sep = "")
}
if (is.vector(x) | is.vector(unclass(x)) | (is.factor(x)) |
any(class(x) == "POSIXt" | class(x) == "difftime")) {
if (typeof(x) == "character") {
stop(paste(deparse(substitute(x)), "is a character vector"))
}
if (is.factor(x)) {
x <- na.omit(as.numeric(x))
}
if (!is.null(by)) {
by1 <- factor(by, exclude = NULL)
if (any(is.na(levels(by1)))) {
levels(by1)[length(levels(by1))] <- "missing"
}
lev <- levels(by1)
multiple.a <- NULL
for (i in 1:length(lev)) {
x1 <- subset(x, by1 == lev[i])
if (any(class(x1) == "POSIXt")) {
a <- format((summary(x1))[c(1, 3, 4, 6)], "%Y-%m-%d %H:%M")
}
else {
a <- rep("", 6)
dim(a) <- c(1, 6)
if (any(class(x1) == "Date")) {
a[1, ] <- c(length(x1), format(c(summary(x1)[4],
summary(x1)[3], NA, summary(x1)[1], summary(x1)[6]),
"%Y-%m-%d"))
}
else if (any(class(x) == "logical")) {
a[1, ] <- round(c(length(na.omit(x1)), mean(na.omit(x1)),
quantile(na.omit(x1), 0.5), ifelse(is.na(mean(na.omit(x1))),
NA, round(sd(na.omit(x1)), 2)), min(na.omit(x1)),
max(na.omit(x1))), 3)
}
else if (any(class(x) == "difftime")) {
a[1, ] <- round(c(length(na.omit(x1)), mean(na.omit(as.numeric(x1))),
quantile(na.omit(as.numeric(x1)), 0.5),
ifelse(is.na(mean(na.omit(as.numeric(x1)))),
NA, round(sd(na.omit(as.numeric(x1))),
2)), min(na.omit(as.numeric(x1))),
max(na.omit(as.numeric(x1)))), 3)
}
else {
a[1, ] <- round(c(length(na.omit(x1)), summary(x1)[4],
summary(x1)[3], ifelse(is.na(mean(na.omit(x1))),
NA, sd(na.omit(x1))), summary(x1)[1],
summary(x1)[6]), 3)
}
colnames(a) <- c(.obs, .mean, .median, .sd,
.min, .max)
rownames(a) <- " "
}
multiple.a <- rbind(multiple.a, a)
row.names(multiple.a) <- rep("", nrow(multiple.a))
}
}
else {
if (any(class(x) == "POSIXt")) {
a <- (format((summary(x))[c(1, 3, 4, 6)], "%Y-%m-%d %H:%M"))
}
else {
a <- rep("", 6)
dim(a) <- c(1, 6)
if (any(class(x) == "Date")) {
a[1, ] <- c(length(na.omit(x)), format(c(summary(x)[4],
summary(x)[3], NA, summary(x)[1], summary(x)[6]),
"%Y-%m-%d"))
}
else if (any(class(x) == "difftime")) {
a[1, ] <- c(length(na.omit(x)), summary(as.numeric(x))[4],
summary(as.numeric(x))[3], ifelse(is.na(mean(na.omit(x1))),
NA, round(sd(na.omit(x1)), 2)), summary(as.numeric(x))[1],
summary(as.numeric(x))[6])
}
else {
a[1, ] <- round(c(length(na.omit(x)), mean(na.omit(x)),
quantile(na.omit(x), 0.5), ifelse(is.na(mean(na.omit(x))),
NA, round(sd(na.omit(x)), 2)), min(na.omit(x)),
max(na.omit(x))), 3)
}
colnames(a) <- c(.obs, .mean, .median, .sd, .min,
.max)
rownames(a) <- " "
}
}
}
else if (is.recursive(x) && length(x) == 1) {
a <- summary(x)
}
else if (!is.recursive(x) && !is.vector(x) && !is.factor(x))
a <- summary(x)
else {
a <- rep("", (dim(x)[2]) * 7)
dim(a) <- c(dim(x)[2], 7)
colnames(a) <- c(.var.name, .obs, .mean, .median, .sd,
.min, .max)
a[, 1] <- attr(x, "names")
rownames(a) <- 1:nrow(a)
for (i in 1:(dim(x)[2])) {
if ((typeof(x[i][1, ]) == "character") || is.na(mean(na.omit(as.numeric(x[[i]]))))) {
a[i, 3:7] <- ""
}
else {
if (any(class(x[[i]]) == "Date")) {
a[i, c(3, 4, 6, 7)] <- format(c(summary(x[[i]])[4],
summary(x[[i]])[3], summary(x[[i]])[1], summary(x[[i]])[6]),
"%Y-%m-%d")
a[i, 5] <- NA
a[i, 2] <- length((x[[i]])[!is.na(x[[i]])])
}
else if (any(class(x[[i]]) == "POSIXt")) {
a[i, c(3, 4, 6, 7)] <- format(c(summary(x[[i]])[4],
summary(x[[i]])[3], summary(x[[i]])[1], summary(x[[i]])[6]),
"%Y-%m-%d %H:%M")
a[i, 5] <- NA
a[i, 2] <- length((x[[i]])[!is.na(x[[i]])])
}
else if (any(class(x[[i]]) == "difftime")) {
a[i, c(3, 4, 6, 7)] <- c(summary(as.numeric(x[[i]]))[c(4,
3, 1, 6)])
a[i, 5] <- round(sd(x[[i]], na.rm = TRUE),
2)
a[i, 2] <- length((x[[i]])[!is.na(x[[i]])])
}
else if (suppressWarnings(is.integer(x[[i]]) ||
is.numeric(x[[i]]) | (is.logical(x[[i]]) &
!is.na(mean(na.omit(as.numeric(x[[i]]))))))) {
a[i, 3:7] <- round(c(mean(na.omit(x[[i]])),
quantile(na.omit(x[[i]]), 0.5), sd(na.omit(x[[i]])),
min(na.omit(x[[i]])), max(na.omit(x[[i]]))),
2)
a[i, 2] <- as.character(length(na.omit(as.numeric(x[[i]]))))
}
else if (is.null(class(x[[i]]))) {
a[i, 3:7] <- round(c(mean(na.omit(as.numeric(x[[i]]))),
quantile(na.omit(as.numeric(x[[i]])), 0.5),
sd(na.omit(as.numeric(x[[i]]))), min(na.omit(as.numeric(x[[i]]))),
max(na.omit(as.numeric(x[[i]])))), 2)
a[i, 2] <- as.character(length(na.omit(x[[i]])))
}
else if (is.factor(x[i][2, ])) {
a[i, 2] <- as.character(length(na.omit(x[[i]])))
a[i, 3:7] <- round(c(mean(na.omit(unclass(x[i][,
]))), median(na.omit(unclass(x[i][, ]))),
sd(na.omit(unclass(x[i][, ]))), min(na.omit(unclass(x[i][,
]))), max(na.omit(unclass(x[i][, ])))),
3)
}
}
}
}
if (is.data.frame(x)) {
results <- list(heading = heading, table = a)
class(results) <- c("summ", "table")
results
}
else {
if (is.null(by)) {
if (class(a) == "matrix") {
results <- list(table = a)
class(results) <- c("summ", "matrix")
results
}
else {
results <- list(object = a)
class(results) <- c("summ", class(a))
results
}
}
else {
results <- list(byname = deparse(substitute(by)),
levels = levels(factor(by)), table = multiple.a)
class(results) <- c("summ", "list")
results
}
}
}
summ_mod(time.expose)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
summ_mod(time.expose)
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by = step)
x[which.min(x)]
x[which.min(x)]
summ
source('~/.active-rstudio-document')
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by = step)
summ_mod(time.expose)
summary(x)
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by = step)
?seq.POSIXt
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)])
time.pretty <- seq(from = x[which.min(x)], to = x[which.min(x)],
by="min")
source('~/.active-rstudio-document')
summ_mod(time.expose)
a <- (format((summary(x))[c(1, 3, 4, 6)], "%Y-%m-%d %H:%M"))
summary(x))[c(1, 3, 4, 6)]
summary(x))[c(1, 3, 4, 6)])
summary(x)[c(1, 3, 4, 6)]
?format
x[which.min(x)]
summary(x)
summary(x)[3]
summary(x)[4]
summary(x)[5]
summary(x)[6]
source('~/.active-rstudio-document')
summ_mod(x)
source('~/.active-rstudio-document')
summ_mod(x)
source('~/.active-rstudio-document')
summ_mod(x)
summ_mod(time.expose)
time.expose<-ISOdatetime(year=1990,month=8,day=day.exptime,hour=hr.exptime,min=min.exptime,sec=0)
summ_mod(time.expose)
summ_mod(time.expose)
(-8/5)/((-8/5)+2)
-4+5
4*4
log10(0.05)
-log10(0.05)
-log10(0.01)
-log10(0.00001)
vars <- c(177, 163, 180, 150, 170, 159, 173, 175)
var(vars)
(var(vars))^2
sqrt(var(vars))
sd(vars)
var(vars)
?var
cov(vars)
install.packages("FinCal")
library("FinCal")
coefficient.variation(sd(vars), mean(vars))
shapiro.test(vars)
vars <- c(55,60,67,67,70,70,70,7073,76,80,80)
shapiro.test(vars)
n = 1000
print(n * log(n))
print(log2(n))
setwd("~/OneDrive - UNIVERSIDAD NACIONAL AUTÓNOMA DE MÉXICO/owncloud/HACKATONES/BREWINGDATACUP2020/BrewingDataCup2020")
library(dplyr)
datos <- read.csv("ubicaciones.csv",
header = TRUE, row.names = 1)
View(datos)
plot(datos$lat, datos$lon)
library(cluster)
####Clustering
df_long <- datos[,4:5]
View(df_long)
distance <- get_dist(df_long)
library(cluster)
distance <- get_dist(df_long)
library(factoextra)
library(MASS)
distance <- get_dist(df_long)
k2 <- kmeans(df_long, centers = 2, nstart = 25) #Agrupamos k-medias con 25 configuraciones
str(k2)
fviz_cluster(k2, data = df_long) #Visualizamos con 2 clusters
mean(datos$lat)
datos[datos$Frecuencia == 1,]
nrow(datos[datos$Frecuencia == 1,])
df_long_normalized <-  scale(df_long ,center = TRUE, scale = TRUE)
View(df_long_normalized)
plot(df_long_normalized[,1], df_long_normalized[,2])
k2 <- kmeans(df_long_normalized, centers = 2, nstart = 25) #Agrupamos k-medias con 25 configuraciones
str(k2)
fviz_cluster(k2, data = df_long_normalized) #Visualizamos con 2 clusters
datos_clust <- datos
k2$cluster
a <- k2$cluster
a
names(a)
datos_clust$cluster <- k2$cluster
View(datos_clust)
clust1 <- filter(datos_clust, cluster == 1)
clust2 <- filter(datos_clust, cluster == 2)
vol_clust1 <- sum(clust1$Vol_Entrega)
vol_clust2 <- sum(clust2$Vol_Entrega)
(vol_clust1 + vol_clust2) / (vol_clust1 - vol_clust2)
mean(clust1$Vol_Entrega)
mean(clust2$Vol_Entrega)
View(clust1)
View(datos_clust)
datos_clust[,4:5]
datos_clust[,4:5] <- df_long_normalized
datos_clust$cluster <- k2$cluster
clust1 <- filter(datos_clust, cluster == 1)
clust2 <- filter(datos_clust, cluster == 2)
View(clust1)
datos_clust$Vol_Total <- datos_clust$Frecuencia * datos_clust$Vol_Entrega
datos_clust$cluster <- k2$cluster
clust1 <- filter(datos_clust, cluster == 1)
clust2 <- filter(datos_clust, cluster == 2)
vol_clust1 <- sum(clust1$Vol_Entrega)
vol_clust2 <- sum(clust2$Vol_Entrega)
View(clust1)
k2 <- kmeans(df_long_normalized, centers = 6, nstart = 25) #Agrupamos k-medias con 25 configuraciones
str(k2)
fviz_cluster(k2, data = df_long_normalized) #Visualizamos con 2 clusters
nrow(datos[datos$Vol_Entrega == 0,])
#####CLUSTER POR VOLUMEN TOTAL
df_vol <- datos_clust$Vol_Total
df_vol <-  scale(df_vol ,center = TRUE, scale = TRUE)
#####CLUSTER POR VOLUMEN TOTAL
df_vol <- datos_clust$Vol_Total
df_vol <-  scale(df_vol ,center = TRUE, scale = TRUE)
k2_dist <- kmeans(df_vol, centers = 2, nstart = 25) #Agrupamos k-medias con 25 configuraciones
str(k2_dist)
fviz_cluster(k2_dist, data = df_vol) #Visualizamos con 2 clusters
k2_dist$cluster
datos_clust$cluster_vol_total <- k2_dist$cluster
View(datos_clust)
fviz_cluster(k2_dist, data = df_long_normalized) #Visualizamos con 2 clusters
k2 <- kmeans(df_long_normalized, centers = 6, nstart = 25) #Agrupamos k-medias con 25 configuraciones
str(k2)
fviz_cluster(k2, data = df_long_normalized) #Visualizamos con 2 clusters
datos_clust <- datos
datos_clust[,4:5] <- df_long_normalized
datos_clust$Vol_Total <- datos_clust$Frecuencia * datos_clust$Vol_Entrega
datos_clust$cluster <- k2$cluster
clust1 <- filter(datos_clust, cluster == 1)
clust2 <- filter(datos_clust, cluster == 2)
for( i in 1:6){
df_filt <- filter(datos_clust, cluster == i)
message(sum(df_filt$Vol_Entrega))
}
vol_total <- sum(df_filt$Vol_Entrega)
for( i in 1:6){
df_filt <- filter(datos_clust, cluster == i)
vol_total <- sum(df_filt$Vol_Entrega)
n_elementos <- nrow(df_filt)
promedio <- mean(df_filt$Vol_Entrega)
ms <- paste0("Vol_total= ", vol_total,
" n_elementos= ", n_elementos,
" Promedio= ", promedio)
message(ms)
}
quantile(datos$Vol_Entrega)
for( i in 1:6){
df_filt <- filter(datos_clust, cluster == i)
vol_total <- sum(df_filt$Vol_Entrega)
n_elementos <- nrow(df_filt)
promedio <- mean(df_filt$Vol_Entrega)
ms <- paste0("Vol_total= ", vol_total,
" n_elementos= ", n_elementos,
" Promedio= ", promedio)
message(ms)
quantile(df_filt$Vol_Total)
}
print("a")
message("q")
for( i in 1:6){
df_filt <- filter(datos_clust, cluster == i)
vol_total <- sum(df_filt$Vol_Entrega)
n_elementos <- nrow(df_filt)
promedio <- mean(df_filt$Vol_Entrega)
ms <- paste0("Vol_total= ", vol_total,
" n_elementos= ", n_elementos,
" Promedio= ", promedio)
message(ms)
message(quantile(df_filt$Vol_Total))
}
print(quantile(df_filt$Vol_Entrega))
for( i in 1:6){
df_filt <- filter(datos_clust, cluster == i)
vol_total <- sum(df_filt$Vol_Entrega)
n_elementos <- nrow(df_filt)
promedio <- mean(df_filt$Vol_Entrega)
ms <- paste0("Vol_total= ", vol_total,
" n_elementos= ", n_elementos,
" Promedio= ", promedio)
message(ms)
print(quantile(df_filt$Vol_Total))
}
k2$centers
k2$withinss
k2$size
k2$cluster
?kmeans
k2$size
View(datos_clust)
df_2_y_3 <- filter(datos_clust, Frecuencia == 2 ||
Frecuencia == 3)
df_2_y_3 <- filter(datos_clust, Frecuencia == 2)
df_2 <- filter(datos_clust, Frecuencia == 2)
df_3 <- filter(datos_clust, Frecuencia == 3)
df_2_y_3 <- rbind(df_2, df_3)
View(df_2_y_3)
plot(df_2_y_3$lat, df_2_y_3$lon)
setwd("~/OneDrive - UNIVERSIDAD NACIONAL AUTÓNOMA DE MÉXICO/owncloud/HACKATONES/BREWINGDATACUP2020/BrewingDataCup2020")
